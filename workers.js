/**
 * Welcome to Cloudflare Workers! This is your first worker.
 *
 * - Run "npm run dev" in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run "npm run deploy" to publish your worker
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

export default {
  async fetch(request) {
    const html = `<!DOCTYPE html>
          <body>
            <h1>Check iPhone Stock</h1>
            <p>This markup was generated by a Cloudflare Worker.</p>
          </body>`;

    return new Response(html, {
      headers: {
        "content-type": "text/html;charset=UTF-8",
      },
    });
  },

  async scheduled(event, env, ctx) {
    // Telegram
    function teleMsg(msg) {
      const chatID = env.chatID;
      const botToken = env.botToken;
      const telegram =
        "https://api.telegram.org/bot" +
        botToken +
        "/sendMessage?chat_id=" +
        chatID +
        "parse_mode=HTML&text=";

      (async () => {
        try {
          await fetch(telegram + msg, {
            method: "POST",
          });
        } catch (error) {
          console.log(error.response.body);
        }
      })();
    }

    // async fetch(request, env, ctx) {
    const [pickupDisplay, storePickupProductTitle, storePickupQuote] =
      await checkAvailability();

    if (!pickupDisplay || !storePickupProductTitle || !storePickupQuote) {
      console.log("Canberra store not found");

      // let html = generateHTML(
      //   "Canberra store not found",
      //   "Canberra store not found"
      // );

      // return new Response(html, {
      //   headers: {
      //     "content-type": "text/html;charset=UTF-8",
      //   },
      // });
    }

    if (pickupDisplay !== "available") {
      let message = `Not available: ${storePickupProductTitle} - ${storePickupQuote}`;
      console.log(message);

      try {
        console.log("Starting TeleMsg...");
        teleMsg(encodeURI(message));
        console.log("Not available message sent")
      } catch (error) {
        console.log("Here is the error with TeleMsg:");
        console.log(error);
      }
      return;

    } else {
      let message = `${storePickupProductTitle} - ${storePickupQuote}`;
      console.log(message);

      try {
        console.log("Starting TeleMsg...");
        teleMsg(encodeURI(message));
        console.log("Available message sent")
      } catch (error) {
        console.log("Here is the error with TeleMsg:");
        console.log(error);
      }
    }

    // let html = generateHTML(storePickupProductTitle, storePickupQuote);

    // return new Response(html, {
    //   headers: {
    //     "content-type": "text/html;charset=UTF-8",
    //   },
    // });
  },
};

async function checkAvailability() {
  const url =
    "https://www.apple.com/au/shop/fulfillment-messages?pl=true&mts.0=regular&mts.1=compact&parts.0=MU783ZP/A&searchNearby=true&store=R483";
  const init = {
    headers: {
      "content-type": "application/json;charset=UTF-8",
    },
  };

  const response = await fetch(url, init);

  console.log("Response status:", response.status);
  console.log("Response headers:", response.headers);
  const results = await gatherResponse(response);
  console.log("Results:", results);

  const canberraStore = results.body.content.pickupMessage.stores[0];

  if (!canberraStore || canberraStore.storeName !== "Canberra") {
    console.log("Canberra store not found");
    return;
  }

  const partsAvailability = canberraStore.partsAvailability["MU783ZP/A"];
  const pickupDisplay = partsAvailability.pickupDisplay;

  const storePickupProductTitle =
    partsAvailability.messageTypes.compact.storePickupProductTitle;
  const storePickupQuote =
    partsAvailability.messageTypes.compact.storePickupQuote;

  return [pickupDisplay, storePickupProductTitle, storePickupQuote];
}

/**
 * gatherResponse awaits and returns a response body as a string.
 * Use await gatherResponse(..) in an async function to get the response body
 * @param {Response} response
 */
async function gatherResponse(response) {
  const { headers } = response;

  const contentType = headers.get("content-type") || "";

  if (contentType.includes("application/json")) {
    return await response.json();
  }

  return response.text();
}

function generateHTML(title, quote) {
  return `
        <html>
            <head>
                <title>${title}</title>
            </head>
            <body>
                <h1>${title}</h1>
                <p>${quote}</p>
            </body>
        </html>
        `;
}
